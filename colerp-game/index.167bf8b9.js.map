{"mappings":"AAAA,MAAM;IAEF,YAAY,UAAU,EAAE,YAAY,EAAE,OAAO,EAAE,aAAa,KAAK,CAAC;QAC9D,IAAI,CAAC,QAAQ;QACb,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,UAAU;QACf,IAAI,CAAC,aAAa;QAElB,IAAG,cAAc,QACb,IAAI,CAAC,WAAW;aAEhB,IAAI,CAAC,WAAW;QAGpB,yBAAyB;QACzB,MAAM,IAAI,CAAC,aAAa,WACpB,IAAI,CAAC,aAAa,YAAY,IAAI,CAAC,aAAa;QAGpD,sBAAsB;QACtB,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,oBAAoB,IAAI;YAC5C,IAAI,MAAM,SAAS,cAAc;YACjC,IAAI,UAAU,IAAI;YAClB,IAAI,KAAK,IAAI,CAAC,sBAAsB,IAAI,aAAa,MAAM;YAC3D,IAAI,CAAC,aAAa,YAAY;QAClC;QACA,IAAI,CAAC;IACT;IAEA,WAAU;QACN,IAAI,SAAS,IAAI,CAAC;QAClB,IAAI,SAAS,IAAI,CAAC;QAElB,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,oBAAoB,IAAI;YAC5C,IAAI,MAAM,IAAI,CAAC,aAAa,QAAQ,CAAC,EAAE;YACvC,IAAI,MAAM,kBAAkB,IAAI,CAAC,UAAU,QAAQ,QAAQ,IAAK,CAAA,IAAI,CAAC,qBAAqB,CAAA;YAC1F,IAAI,KAAK,IAAI,CAAC,sBAAqB;gBAC/B,IAAI,MAAM,kBAAkB;gBAC5B,IAAI,CAAC,cAAc,IAAI,CAAC,UAAU,QAAQ,QAAQ;YACtD;QACJ;IACJ;IAEA,qBAAoB;QAChB,IAAG,IAAI,CAAC,cAAc,OAAM;YACxB,IAAI,IAAI,SAAS,IAAI,CAAC,QAAQ,IAAI;YAClC,IAAI,IAAI,SAAS,IAAI,CAAC,QAAQ,MAAM;YACpC,IAAI,IAAI,SAAS,IAAI,CAAC,QAAQ,KAAK;YACnC,OAAO,IAAI,CAAC,SAAS,GAAG,GAAG;QAC/B;IACJ;IACA,iBAAgB;QACZ,OAAO,IAAI,CAAC;IAChB;IAEA,eAAc;QACV,IAAI,cAAc,IAAI,CAAC,SAAS,IAAI,CAAC;QACrC,IAAI,cAAc,IAAI,CAAC,SAAS,IAAI,CAAC;QAErC,IAAI,KAAK,YAAY,IAAI,YAAY;QACrC,IAAI,KAAK,YAAY,IAAI,YAAY;QACrC,IAAI,KAAK,YAAY,IAAI,YAAY;QAErC,IAAI,WAAW,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;QAElD,IAAI,QAAQ,MAAM,KAAK,MAAM;QAE7B,IAAG,QAAQ,GAAG,QAAQ;QACtB,OAAO;IACX;IAEA,mBAAkB;QACd,IAAG,IAAI,CAAC,UACJ,OAAO;aAEP,OAAO;IACf;IAEA,qBAAoB;QAChB,IAAG,IAAI,CAAC,UACJ,OAAO;aAEP,OAAO;IACf;IAEA,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;QACb,IAAI,EAAE,SAAS;QACf,IAAI,EAAE,UAAU,IAAI,MAAM,IAAI;QAC9B,IAAI,EAAE,SAAS;QACf,IAAI,EAAE,UAAU,IAAI,MAAM,IAAI;QAC9B,IAAI,EAAE,SAAS;QACf,IAAI,EAAE,UAAU,IAAI,MAAM,IAAI;QAE9B,OAAO,MAAM,IAAI,IAAI;IACzB;IAEA,SAAS,GAAG,EAAC;QACT,IAAI,IAAI,SAAS,IAAI,UAAU,GAAG,IAAI;QACtC,IAAI,IAAI,SAAS,IAAI,UAAU,GAAG,IAAI;QACtC,IAAI,IAAI,SAAS,IAAI,UAAU,GAAG,IAAI;QAEtC,OAAO;YAAC,GAAG;YAAG,GAAG;YAAG,GAAG;QAAC;IAC5B;IAEA,cAAa;QACT,IAAI,IAAI,KAAK,MAAM,KAAK,WAAW;QACnC,IAAI,IAAI,KAAK,MAAM,KAAK,WAAW;QACnC,IAAI,IAAI,KAAK,MAAM,KAAK,WAAW;QAEnC,IAAI,MAAM,IAAI,CAAC,SAAS,GAAG,GAAG;QAC9B,OAAO;IACX;IAEA,UAAU,MAAM,EAAE,MAAM,EAAE,MAAM,EAAC;QAC7B,IAAI,KAAK,IAAI,CAAC,SAAS;QACvB,IAAI,KAAK,IAAI,CAAC,SAAS;QAEvB,IAAI,IAAI,KAAK,MAAM,GAAG,IAAI,AAAC,CAAA,GAAG,IAAI,GAAG,CAAA,IAAK;QAC1C,IAAI,IAAI,KAAK,MAAM,GAAG,IAAI,AAAC,CAAA,GAAG,IAAI,GAAG,CAAA,IAAK;QAC1C,IAAI,IAAI,KAAK,MAAM,GAAG,IAAI,AAAC,CAAA,GAAG,IAAI,GAAG,CAAA,IAAK;QAE1C,IAAI,MAAM,IAAI,CAAC,SAAS,GAAG,GAAG;QAC9B,OAAO;IACX;AAEJ","sources":["src/js/game.js"],"sourcesContent":["class Game {\n\n    constructor(difficulty, boxContainer, sliders, sliderMode = \"rgb\"){\n        this.score = 0;\n        this.boxContainer = boxContainer;\n        this.sliders = sliders;\n        this.sliderMode = sliderMode;\n\n        if(difficulty == \"easy\"){\n            this.hardMode = false;\n        }else{\n            this.hardMode = true;\n        }\n\n        // Remove all color boxes\n        while(this.boxContainer.firstChild){\n            this.boxContainer.removeChild(this.boxContainer.firstChild);\n        }\n\n        // Add new color boxes\n        for(let i = 0; i < this.getNumberOfBoxes(); i++){\n            let box = document.createElement(\"div\");\n            box.classList.add(\"color-box\");\n            if (i == this.getMiddleBoxNumber()) box.setAttribute(\"id\", \"result-box\");\n            this.boxContainer.appendChild(box);\n        }\n        this.newRound();\n    }\n\n    newRound(){\n        let color1 = this.randomColor();\n        let color2 = this.randomColor();\n\n        for(let i = 0; i < this.getNumberOfBoxes(); i++){\n            let box = this.boxContainer.children[i];\n            box.style.backgroundColor = this.lerpColor(color1, color2, i / (this.getNumberOfBoxes() - 1));\n            if (i == this.getMiddleBoxNumber()){\n                box.style.backgroundColor = \"transparent\";\n                this.targetColor = this.lerpColor(color1, color2, 0.5);\n            }\n        }\n    }\n\n    computeResultColor(){\n        if(this.sliderMode == \"rgb\"){\n            let r = parseInt(this.sliders.red.value);\n            let g = parseInt(this.sliders.green.value);\n            let b = parseInt(this.sliders.blue.value);\n            return this.rgbToHex(r, g, b);\n        }\n    }\n    getTargetColor(){\n        return this.targetColor;\n    }\n\n    computeScore(){\n        let resultColor = this.hexToRgb(this.computeResultColor());\n        let targetColor = this.hexToRgb(this.targetColor);\n\n        let dr = resultColor.r - targetColor.r;\n        let dg = resultColor.g - targetColor.g;\n        let db = resultColor.b - targetColor.b;\n\n        let distance = Math.sqrt(dr * dr + dg * dg + db * db);\n        \n        let score = 100 - Math.floor(distance);\n\n        if(score < 0) score = 0;\n        return score;\n    }\n\n    getNumberOfBoxes(){\n        if(this.hardMode)\n            return 3;\n        else\n            return 5;\n    }\n\n    getMiddleBoxNumber(){\n        if(this.hardMode)\n            return 1;\n        else\n            return 2;\n    }\n\n    rgbToHex(r, g, b){\n        r = r.toString(16);\n        r = r.length == 1 ? \"0\" + r : r;\n        g = g.toString(16);\n        g = g.length == 1 ? \"0\" + g : g;\n        b = b.toString(16);\n        b = b.length == 1 ? \"0\" + b : b;\n\n        return \"#\" + r + g + b;\n    }\n\n    hexToRgb(hex){\n        let r = parseInt(hex.substring(1, 3), 16);\n        let g = parseInt(hex.substring(3, 5), 16);\n        let b = parseInt(hex.substring(5, 7), 16);\n    \n        return {r: r, g: g, b: b};\n    }\n\n    randomColor(){\n        let r = Math.floor(Math.random() * 255);\n        let g = Math.floor(Math.random() * 255);\n        let b = Math.floor(Math.random() * 255);\n\n        let hex = this.rgbToHex(r, g, b);\n        return hex;\n    }\n\n    lerpColor(color1, color2, amount){\n        let c1 = this.hexToRgb(color1);\n        let c2 = this.hexToRgb(color2);\n\n        let r = Math.floor(c1.r + (c2.r - c1.r) * amount);\n        let g = Math.floor(c1.g + (c2.g - c1.g) * amount);\n        let b = Math.floor(c1.b + (c2.b - c1.b) * amount);\n\n        let hex = this.rgbToHex(r, g, b);\n        return hex;\n    }\n\n}"],"names":[],"version":3,"file":"index.167bf8b9.js.map"}